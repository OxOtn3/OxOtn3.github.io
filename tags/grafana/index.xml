<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Grafana on 耶宵夜</title>
        <link>https://example.com/tags/grafana/</link>
        <description>Recent content in Grafana on 耶宵夜</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 28 Apr 2022 16:08:25 +0800</lastBuildDate><atom:link href="https://example.com/tags/grafana/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>基于OpenTSDB搭建Grafana监控实践</title>
        <link>https://example.com/p/grafana/</link>
        <pubDate>Thu, 28 Apr 2022 16:08:25 +0800</pubDate>
        
        <guid>https://example.com/p/grafana/</guid>
        <description>&lt;h2 id=&#34;whats-opentsdb&#34;&gt;What&amp;rsquo;s OpenTSDB&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenTSDB consists of a &lt;strong&gt;Time Series Daemon (TSD)&lt;/strong&gt; as well as set of command line utilities. Interaction with OpenTSDB is primarily achieved by running one or more of the TSDs. Each TSD is independent. There is no master, no shared state so you can run as many TSDs as required to handle any load you throw at it. Each TSD uses the open source database HBase or hosted Google Bigtable service to store and retrieve time-series data. The data schema is highly optimized for fast aggregations of similar time series to minimize storage space. Users of the TSD never need to access the underlying store directly. You can communicate with the TSD via a simple telnet-style protocol, an HTTP API or a simple built-in GUI. All communications happen on the same port (the TSD figures out the protocol of the client by looking at the first few bytes it receives).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看下官网给出的架构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vurtneatfield.oss-cn-shanghai.aliyuncs.com/img/tsdb-architecture.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;infra&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;重点就是基于HBase的分布式的时间序列数据库，所以非常适合做监控系统。&lt;/p&gt;
&lt;h2 id=&#34;grafana搭建监控&#34;&gt;Grafana搭建监控&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;首先Grafana监控是基于Metrics打点实现的，可以参考其他的文档，这里不再赘述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Metric&lt;/code&gt; ：打点的tag&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Aggregator&lt;/code&gt; ：可以选择sum/average等&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Alias&lt;/code&gt; ：取名，可以通过${&amp;hellip;}的方式获取Filters/Tags以及Variables中的变量，下面会提到&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Downsampling&lt;/code&gt; ：降采样，官方文档解释为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Downsampling (or in signal processing, &lt;em&gt;decimation&lt;/em&gt;) is the process of reducing the sampling rate, or resolution, of data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实很好理解，看下开启Downsampling前后的两张对比图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vurtneatfield.oss-cn-shanghai.aliyuncs.com/img/downsampling-before.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;before downsampling&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vurtneatfield.oss-cn-shanghai.aliyuncs.com/img/downsampling-after.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;after downsampling&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;很明显，使用Downsampling之后的采样数据在降低了采样率的情况下，依然能够表现出与原采样结构较吻合的曲线走势。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Filters&lt;/code&gt; 和 &lt;code&gt;Tags&lt;/code&gt; ：其实这两个是类似的概念，但需要注意二者不能同时使用，并且Tags也在OpenTSDB2.2之后就deprecated了，所以我们这里使用Filters。实际上，Filters功能也的确更加丰富。&lt;/p&gt;
&lt;p&gt;大多数情况下，我们的监控需求都可以通过Filters实现，那么下面就来详细介绍一下Filters的用法。&lt;/p&gt;
&lt;p&gt;Filters内置的过滤器有以下几种：&lt;/p&gt;
&lt;h3 id=&#34;literal_or&#34;&gt;literal_or&lt;/h3&gt;
&lt;p&gt;Takes a single literal value or a &lt;code&gt;|&lt;/code&gt; pipe delimited list of values and returns any time series matching the results on a case sensitive bases. This is a very efficient filter as it can resolve the strings to UIDs and send that to the storage layer for pre-filtering. In SQL this is similar to the &lt;code&gt;IN&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt; predicates.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Examples&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;host=literal_or(web01|web02|web03)&lt;/code&gt; In SQL: &lt;code&gt;WHERE host IN (&#39;web01&#39;, &#39;web02&#39;, &#39;web03&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host=literal_or(web01)&lt;/code&gt; In SQL: &lt;code&gt;WHERE host = &#39;web01&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;iliteral_or&#34;&gt;iliteral_or&lt;/h3&gt;
&lt;p&gt;The same as a &lt;code&gt;literal_or&lt;/code&gt; but is case insensitive. Note that this is not efficient like the literal or as it must post-process all rows from storage.&lt;/p&gt;
&lt;h3 id=&#34;not_literal_or&#34;&gt;not_literal_or&lt;/h3&gt;
&lt;p&gt;Case sensitive &lt;code&gt;literal_or&lt;/code&gt; that will return series that do &lt;strong&gt;NOT&lt;/strong&gt; match the given list of values. Efficient as it can be pre-processed by storage.&lt;/p&gt;
&lt;h3 id=&#34;not_iliteral_or&#34;&gt;not_iliteral_or&lt;/h3&gt;
&lt;p&gt;Case insensitive &lt;code&gt;not_literal_or&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;wildcard&#34;&gt;wildcard&lt;/h3&gt;
&lt;p&gt;Provides case sensitive postfix, prefix, infix and multi-infix filtering. The wildcard character is an asterisk (star) &lt;code&gt;*&lt;/code&gt;. Multiple wildcards can be used. If only the asterisk is given, the filter effectively returns any time series that include the tag key (and is an efficient filter that can be pre-processed). In SQL land, this is similar to &lt;code&gt;LIKE&lt;/code&gt; predicate with a bit more flexibility.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Examples&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;host=wildcard(*mysite.com)&lt;/code&gt; In SQL: &lt;code&gt;WHERE host=&#39;%mysite.com&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host=wildcard(web*)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host=wildcard(web*mysite.com)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host=wildcard(web*mysite*)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host=wildcard(*)&lt;/code&gt; This is equivalent to the v1 basic group by operator and is efficient.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;iwildcard&#34;&gt;iwildcard&lt;/h3&gt;
&lt;p&gt;The same as &lt;code&gt;wildcard&lt;/code&gt; but case insensitive.&lt;/p&gt;
&lt;h3 id=&#34;regexp&#34;&gt;regexp&lt;/h3&gt;
&lt;p&gt;Filters using POSIX compliant regular expressions post fetching from storage. The filter uses Java’s built-in regular expression operation. Be careful to escape special characters depending on the query method used.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Examples&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;regexp(web.*)&lt;/code&gt; In SQL: &lt;code&gt;WHERE host REGEXP &#39;web.*&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regexp(web[0-9].mysite.com)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结一下，大多数情况下使用literal_or/not_literal_or/wildcard即可，并且这样也效率更高。有忽略大小写的需求以及支持正则表达式的需求可以使用剩下的几种。&lt;/p&gt;
&lt;p&gt;这里还有一个很细的点，v2.1即之前只有 | 和 * 可用，区别在于：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the original OpenTSDB release and up to 2.1, only two types of filters were available and they were implicitly configured for grouping. The two operators allowed were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;***** - The asterisk (or &lt;em&gt;wildcard&lt;/em&gt;) will return a separate result for each unique tag value detected. E.g. if the tag key &lt;code&gt;host&lt;/code&gt; was paired with &lt;code&gt;web01&lt;/code&gt; and &lt;code&gt;web02&lt;/code&gt; then there would be two groups emitted, one on &lt;code&gt;web01&lt;/code&gt; and one on &lt;code&gt;web02&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;|&lt;/strong&gt; - The pipe (or &lt;em&gt;literal_or&lt;/em&gt;) will return a separate result &lt;em&gt;only&lt;/em&gt; for the exact tag values specified. I.e. it will match only time series with the given tag value and group on each of those matches.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Multiple filters can be provided per query and the results are always &lt;em&gt;ANDed&lt;/em&gt; together. These filters are still available for use in 2.x and later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的理解里大概意思是，* 占位符会为每种结果单独统计，而 | 的使用将会将所有可能取值聚合在一起。（不知道对不对）&lt;/p&gt;
&lt;p&gt;了解完这些之后，基本就能满足我们的过滤需求了，那么我们可以通过${&amp;hellip;}的方式让Alias更加直观。有这么两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过Filters中的Key直接指定，例如 &lt;code&gt;${tag_country}&lt;/code&gt; 指代country的取值。&lt;strong&gt;需要注意的是&lt;/strong&gt;，这种方法在使用Filters时，只有当 &lt;code&gt;groupBy = true&lt;/code&gt; 时才能正确读取，原因其实很简单，因为只有 groupBy = true 时才会聚合曲线；而使用Tags时没有这一问题。&lt;/li&gt;
&lt;li&gt;通过配置Variables中变量指定，例如 &lt;code&gt;${country}&lt;/code&gt; 指代country的值，是的，这里无需加上 &lt;code&gt;tag_&lt;/code&gt; 前缀。&lt;strong&gt;需要注意的是&lt;/strong&gt;，当配置变量为K-V对时，这种方法读取的是Value。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;基于OpenTSDB，通过我们的Metrics打点，在了解了Filters原理以及使用方法后，我们便能够很好地在Grafana上搭建符合我们需求的监控大盘了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://opentsdb.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenTSDB官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
