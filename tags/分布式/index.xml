<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>分布式 on 耶宵夜</title>
        <link>https://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
        <description>Recent content in 分布式 on 耶宵夜</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 11 Mar 2022 15:07:15 +0800</lastBuildDate><atom:link href="https://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>《凤凰架构》读书笔记（1）</title>
        <link>https://example.com/p/fenix_arch_book_1/</link>
        <pubDate>Fri, 11 Mar 2022 15:07:15 +0800</pubDate>
        
        <guid>https://example.com/p/fenix_arch_book_1/</guid>
        <description>&lt;h2 id=&#34;第1章-服务架构演进史&#34;&gt;第1章 服务架构演进史&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;架构并不是被发明出来的，而是持续演进的结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;2 Pizza Team&lt;/code&gt;: 衡量团队大小的量词，指两个Pizza能喂饱的人数，挺有意思&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;单体系统的真正缺陷不在如何拆分，而在&lt;strong&gt;拆分之后的自治与隔离能力&lt;/strong&gt;上。由于所有代码都运行在同一个进程内，所有模块、方法的调用都无须考虑&lt;strong&gt;网络分区&lt;/strong&gt;、&lt;strong&gt;对象复制&lt;/strong&gt;这些麻烦的事。&lt;/p&gt;
&lt;p&gt;但在获得进程内调用的简单和高效的同时，也意味着一部分代码出现了缺陷，将会过度消耗进程空间内的资源，造成的影响也会是全局性、难以隔离的，例如&lt;strong&gt;内存泄漏&lt;/strong&gt;、&lt;strong&gt;线程爆炸&lt;/strong&gt;、&lt;strong&gt;阻塞&lt;/strong&gt;、&lt;strong&gt;死循环&lt;/strong&gt;等问题。如果出现问题的是某些更高层次的公共资源，例如端口号和数据库连接池泄漏，还会影响整台机器，乃至集群中其他单体副本的正常工作。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;SOA&lt;/code&gt;: Service-Oriented Architecture，面向服务架构，三种代表性的架构模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;烟囱式架构（信息孤岛）&lt;/li&gt;
&lt;li&gt;微内核架构（插件式架构）&lt;/li&gt;
&lt;li&gt;事件驱动架构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SOAP协议被边缘化的本质原因：&lt;strong&gt;过于严格的规范定义带来过度复杂性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;ndash;&amp;gt; ==我的理解==：和OSI7层模型很像，是一种很好的思想，但实际中用到的往往是简化版的，例如5层，TCP/IP协议簇的4层&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;微服务的概念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;微服务是一种通过多个小型服务组合来构建单个应用的架构风格，这些服务围绕业务能力而非特定的技术标准来构建。各个服务可以采用不同的编程语言、不同的存储技术，运行在不同的进程之中。服务采用轻量级的通信机制和自动化的部署机制实现通信与运维。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“微服务时代充满着自由的气息，微服务时代充斥着迷茫的选择。”&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;服务网格&lt;/strong&gt;(Service Mesh)的&lt;strong&gt;边车代理模式&lt;/strong&gt;(Sidecar Proxy)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/fenix_arch_book_1/sidecar_proxy.png&#34;
	width=&#34;1622&#34;
	height=&#34;952&#34;
	srcset=&#34;https://example.com/p/fenix_arch_book_1/sidecar_proxy_hu099d5a05ea85ba71ecf5339ce342528d_363902_480x0_resize_box_3.png 480w, https://example.com/p/fenix_arch_book_1/sidecar_proxy_hu099d5a05ea85ba71ecf5339ce342528d_363902_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;边车代理&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;408px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在虚拟化场景中的边车指，由系统自动在服务容器（通常是k8s的pod）中注入一个&lt;strong&gt;通信代理服务器&lt;/strong&gt;，以类似中间人攻击的方式进行流量劫持，在应用无感知的情况下接管通信。&lt;/p&gt;
&lt;p&gt;这个代理除了实现正常的服务通信外（称为数据平面通信），还接收来自控制器的指令（控制平面通信），根据控制平面中的配置，对数据平面通信的内容进行分析处理，从而实现熔断、认证、度量、监控、负载均衡等各种附加功能。&lt;/p&gt;
&lt;p&gt;通过边车代理模式，既不需要在应用层加入额外的处理代码，也提供了几乎不亚于程序代码的精细管理能力。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Serverless的两大内容&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;后端设施&lt;/strong&gt;(Backend)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;指数据库、消息队列、日志、存储等这类用于支撑业务逻辑运行，但本身无业务含义的技术组件&lt;/p&gt;
&lt;p&gt;这些后端设施都运行在云中，在serverless中称为Baas(Backend as a Service)&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;函数&lt;/strong&gt;(Function)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;指业务逻辑代码，很接近程序编码角度的函数，区别在于serverless中的函数运行在云端，不必考虑算力和容量规划，称为FaaS(Function ..)&lt;/p&gt;
&lt;p&gt;无服务架构确实能降低一些应用的开发和运维成本，例如不需要交互的离线大规模计算，或者Web资讯类网站、小程序、公共API服务、移动应用服务端等契合于无服务架构所擅长的短链接、无状态、适合事件驱动的交互方式。&lt;/p&gt;
&lt;p&gt;但另一方面，对于诸如信息管理系统、网络游戏等，或说对具有业务逻辑复杂、依赖服务端状态、响应速度要求较高、需要长链接等特征的应用，至少目前不是那么合适。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果说微服务架构是分布式系统这条路当前所能做到的极致，那无服务架构，也许就是“不分布式”的云端系统这条路的起点。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;软件开发的最大挑战就在于只能在不完备的信息下决定当前要处理的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We can only see a short distance ahead, but we can see plenty there that needs to be done.&lt;/p&gt;
&lt;p&gt;&amp;ndash;Alan Turing&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
